hub:
  db:
    type: sqlite-memory
  extraConfig:
    overrideServiceAccount: |
      # this script allows serviceAccountName to use dynamic naming based on {username}"
      async def override_service_account_hook(kube_spawner):
        if kube_spawner.service_account is not None:
          kube_spawner.service_account = kube_spawner._expand_user_properties(kube_spawner.service_account)

      c.KubeSpawner.pre_spawn_hook = override_service_account_hook

proxy:
  secretToken: "37d978c42bd042da78a1afa5a32dacaaee863ded4926eca2b30cc3005832d636"

auth:
  dummy:
    password: "password"

singleuser:
  image:
    name: ghcr.io/tripl-ai/arc-jupyter
    tag: latest
    pullPolicy: IfNotPresent
  serviceAccountName: "{username}"
  storage:
    capacity: 20G
  memory:
    limit: 4G
    guarantee: 4G 
  extraEnv:
    JAVA_OPTS: -Xmx4G
  profileList:
    - display_name: "Small(default) Arc-Jupyter Development Environment"
      description: |
        A small fargate instance. 4GB Memory & 1 vCPU. This is the default.
      default: True
      kubespawner_override:
        image: ghcr.io/tripl-ai/arc-jupyter:latest
        cpu_limit: 1
        cpu_guarantee: 1
        mem_limit: 4G
        mem_guarantee: 4G
        extra_resource_limits:
          JAVA_OPTS: -Xmx4G
    - display_name: "Big: Arc-Jupyter Development Environment"
      description: |
        A big fargate instance. 30GB Memory & 4 vCPUs, no GPU, and 64GB of RAM
      kubespawner_override:
        image: ghcr.io/tripl-ai/arc-jupyter:latest
        ports:
          - containerPort: 8080
          - containerPort: 4040
        cpu_limit: 4
        cpu_guarantee: 4
        mem_limit: 30G
        mem_guaranttee: 30G
        # copy in the notebook customisations
        lifecycle_hooks:
          postStart:
            exec:
              command: ["cp", "-r", "/opt/.jupyter", "/home/jovyan/.jupyter"]
